{
  "version": 3,
  "sources": ["../../src/lib/ConfigValidator.ts"],
  "sourcesContent": ["import * as cron from \"node-cron\";\nimport { CRON_ERROR_CODE, CRON_JOB_TYPE, CRON_TARGET_TYPE } from \"./constants\";\nimport { CronJobError } from \"./errors\";\nimport { CronJobConfig, CronTarget, CronTargetType } from \"./interfaces\";\n\n/**\n * Validator for cron job configurations\n */\nexport class ConfigValidator {\n\t/**\n\t * Validate a cron job configuration\n\t */\n\tstatic validateCronJobConfig(config: any, jobId: string): CronJobConfig {\n\t\tif (!config || typeof config !== \"object\") {\n\t\t\tthrow new CronJobError(\"Configuration must be an object\", jobId, CRON_ERROR_CODE.CONFIG_INVALID);\n\t\t}\n\n\t\t// Validate job type first to determine if cron is required\n\t\tconst jobType = config.type || CRON_JOB_TYPE.RECURRING;\n\t\tif (!Object.values(CRON_JOB_TYPE).includes(jobType)) {\n\t\t\tthrow new CronJobError(\n\t\t\t\t`Invalid job type: ${jobType}. Must be one of: ${Object.values(CRON_JOB_TYPE).join(\", \")}`,\n\t\t\t\tjobId,\n\t\t\t\tCRON_ERROR_CODE.CONFIG_INVALID,\n\t\t\t);\n\t\t}\n\n\t\t// Validate cron expression (not required for MANUAL jobs)\n\t\tif (jobType !== CRON_JOB_TYPE.MANUAL) {\n\t\t\tif (!config.cron || typeof config.cron !== \"string\") {\n\t\t\t\tthrow new CronJobError(\n\t\t\t\t\t\"Cron expression is required and must be a string for scheduled jobs\",\n\t\t\t\t\tjobId,\n\t\t\t\t\tCRON_ERROR_CODE.CONFIG_INVALID,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!cron.validate(config.cron)) {\n\t\t\t\tthrow new CronJobError(`Invalid cron expression: ${config.cron}`, jobId, CRON_ERROR_CODE.INVALID_CRON);\n\t\t\t}\n\t\t}\n\n\t\t// Validate targets\n\t\tif (!Array.isArray(config.targets) || config.targets.length === 0) {\n\t\t\tthrow new CronJobError(\"Targets must be a non-empty array\", jobId, CRON_ERROR_CODE.CONFIG_INVALID);\n\t\t}\n\n\t\tconst validatedTargets: CronTarget[] = config.targets.map((target: any, index: number) => {\n\t\t\tif (!target || typeof target !== \"object\") {\n\t\t\t\tthrow new CronJobError(`Target ${index} must be an object`, jobId, CRON_ERROR_CODE.CONFIG_INVALID);\n\t\t\t}\n\n\t\t\tif (!target.id || typeof target.id !== \"string\") {\n\t\t\t\tthrow new CronJobError(\n\t\t\t\t\t`Target ${index} must have a valid 'id' property`,\n\t\t\t\t\tjobId,\n\t\t\t\t\tCRON_ERROR_CODE.CONFIG_INVALID,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Validate target type\n\t\t\tconst targetType: CronTargetType = target.type || CRON_TARGET_TYPE.VALUE;\n\t\t\tif (!Object.values(CRON_TARGET_TYPE).includes(targetType)) {\n\t\t\t\tthrow new CronJobError(\n\t\t\t\t\t`Target ${index} has invalid type '${target.type}'. Must be one of: ${Object.values(CRON_TARGET_TYPE).join(\", \")}`,\n\t\t\t\t\tjobId,\n\t\t\t\t\tCRON_ERROR_CODE.CONFIG_INVALID,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Validate target value based on type\n\t\t\tif (targetType === CRON_TARGET_TYPE.STATE) {\n\t\t\t\t// State reference - validate it's a string\n\t\t\t\tif (typeof target.value !== \"string\") {\n\t\t\t\t\tthrow new CronJobError(\n\t\t\t\t\t\t`Target ${index} with type 'state' must have a string value (state ID)`,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tCRON_ERROR_CODE.CONFIG_INVALID,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (targetType === CRON_TARGET_TYPE.VALUE) {\n\t\t\t\t// Direct value - validate type\n\t\t\t\tconst valueType = typeof target.value;\n\t\t\t\tif (![\"string\", \"number\", \"boolean\"].includes(valueType) && target.value !== null) {\n\t\t\t\t\tthrow new CronJobError(\n\t\t\t\t\t\t`Target ${index} with type 'value' must be string, number, boolean, or null`,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tCRON_ERROR_CODE.CONFIG_INVALID,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Validate delay if provided\n\t\t\tif (target.delay !== undefined) {\n\t\t\t\tif (typeof target.delay !== \"number\" || target.delay < 0 || target.delay > 60000) {\n\t\t\t\t\tthrow new CronJobError(\n\t\t\t\t\t\t`Target ${index} delay must be a number between 0 and 60000 milliseconds`,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tCRON_ERROR_CODE.CONFIG_INVALID,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tid: target.id,\n\t\t\t\ttype: targetType,\n\t\t\t\tvalue: target.value,\n\t\t\t\tdescription: target.description || undefined,\n\t\t\t\tdelay: target.delay || undefined,\n\t\t\t};\n\t\t});\n\n\t\t// Validate active flag\n\t\tif (typeof config.active !== \"boolean\") {\n\t\t\tthrow new CronJobError(\"Active flag must be a boolean\", jobId, CRON_ERROR_CODE.CONFIG_INVALID);\n\t\t}\n\n\t\treturn {\n\t\t\tcron: jobType !== CRON_JOB_TYPE.MANUAL ? config.cron : undefined,\n\t\t\ttargets: validatedTargets,\n\t\t\tactive: config.active,\n\t\t\ttype: jobType,\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
