{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\n\n// Load our modules\nimport { CronJobConfig, CronJobManager } from \"./lib/CronJobManager\";\n\nclass CronScenes extends utils.Adapter {\n\tprivate cronJobManager: CronJobManager;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"cron_scenes\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\tthis.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\t// this.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\n\t\t// Initialize CronJobManager\n\t\tthis.cronJobManager = new CronJobManager(this);\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\tthis.log.info(\"config cronFolder: \" + this.config.cronFolder);\n\t\tthis.log.info(\"config checkInterval: \" + this.config.checkInterval);\n\t\tthis.log.info(\"config enableLogging: \" + this.config.enableLogging);\n\n\t\t/*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n\t\tawait this.setObjectNotExistsAsync(\"testVariable\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"testVariable\",\n\t\t\t\ttype: \"boolean\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\tthis.subscribeStates(\"testVariable\");\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t// this.subscribeStates(\"lights.*\");\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t// this.subscribeStates(\"*\");\n\n\t\t/*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n\t\t// the variable testVariable is set to true as command (ack=false)\n\t\tawait this.setStateAsync(\"testVariable\", true);\n\n\t\t// same thing, but the value is flagged \"ack\"\n\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\n\t\tawait this.setStateAsync(\"testVariable\", { val: true, ack: true });\n\n\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\n\t\tawait this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\n\n\t\t// Initialize cron scenes adapter\n\t\tthis.log.info(\"Cron Scenes adapter started successfully\");\n\n\t\t// Start CronJobManager\n\t\tthis.cronJobManager.initialize();\n\n\t\t// Subscribe to job states in the configured folder\n\t\tconst cronFolder = this.config.cronFolder || `${this.namespace}.jobs`;\n\t\tthis.subscribeStates(`${cronFolder}.*`);\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Shutdown CronJobManager\n\t\t\tthis.cronJobManager.shutdown();\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed object changes\n\t */\n\tprivate onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t\tif (obj) {\n\t\t\t// The object was changed\n\t\t\tthis.log.debug(`object ${id} changed`);\n\n\t\t\t// Check if this is a job configuration change\n\t\t\tconst cronFolder = this.config.cronFolder || `${this.namespace}.jobs`;\n\t\t\tif (id.startsWith(cronFolder)) {\n\t\t\t\t// Job object updated - let checkForJobChanges handle it\n\t\t\t\tthis.log.debug(`Job object ${id} updated`);\n\t\t\t}\n\t\t} else {\n\t\t\t// The object was deleted\n\t\t\tthis.log.debug(`object ${id} deleted`);\n\n\t\t\t// Check if this is a job deletion\n\t\t\tconst cronFolder = this.config.cronFolder || `${this.namespace}.jobs`;\n\t\t\tif (id.startsWith(cronFolder)) {\n\t\t\t\t// Job deleted\n\t\t\t\tthis.cronJobManager.removeJob(id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\n\t\t\t// Check if this is a trigger state\n\t\t\tif (id.endsWith(\".trigger\") && state.val === true && !state.ack) {\n\t\t\t\tconst jobId = id.replace(\".trigger\", \"\");\n\t\t\t\tthis.log.info(`Manual trigger for job ${jobId}`);\n\n\t\t\t\t// Trigger the job\n\t\t\t\tthis.cronJobManager.triggerJob(jobId).catch((error) => {\n\t\t\t\t\tthis.log.error(`Error triggering job ${jobId}: ${error}`);\n\t\t\t\t});\n\n\t\t\t\t// Reset trigger state\n\t\t\t\tthis.setStateAsync(id, false, true);\n\t\t\t}\n\n\t\t\t// Skip processing status states as job changes\n\t\t\tif (id.endsWith(\".status\")) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.debug(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t/**\n\t * Handle job configuration changes\n\t */\n\tprivate async handleJobConfigChange(id: string, config: CronJobConfig): Promise<void> {\n\t\ttry {\n\t\t\tawait this.cronJobManager.addOrUpdateJob(id, config);\n\t\t} catch (error) {\n\t\t\tthis.log.error(`Error updating job ${id}: ${error}`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === \"object\" && obj.message) {\n\t// \t\tif (obj.command === \"send\") {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info(\"send command\");\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new CronScenes(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new CronScenes())();\n}\n"],
  "mappings": "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",
  "names": []
}
